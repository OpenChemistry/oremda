import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import {
  fetchOperators as fetchOperatorsAPI,
} from './api';

import { IdType } from '../../types';
import { OperatorDefinition } from '../../types/operator';

export interface OperatorsState {
  operators: {[key: string]: OperatorDefinition} | undefined
}

const initialState: OperatorsState = {
  operators: undefined,
}

export const fetchOperators = createAsyncThunk<{[key: string]: OperatorDefinition}, {sessionId: IdType}>(
  'operators/fetch',
  async (payload, thunkAPI) => {
    const { sessionId } = payload;
    return await fetchOperatorsAPI(sessionId);
  }
)

export const operatorsSlice = createSlice({
  name: 'operators',
  initialState,
  reducers: {
    setOperators(state, action: PayloadAction<{[key: string]: OperatorDefinition}>) {
      const operators = action.payload;
      state.operators =  operators;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOperators.fulfilled, (state, action) => {
        state.operators = action.payload;
      })
  },
});

export default operatorsSlice.reducer;
