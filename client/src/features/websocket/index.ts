import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { apiClient } from '../../client';
import { IdType } from '../../types';
import { setWebSocket } from '../../websocket';

export interface WebSocketState {
  status: 'connected' | 'disconnected' | 'connecting';
}

const initialState: WebSocketState = {
  status: 'disconnected',
}

export const connectWebSocket = createAsyncThunk<void, {sessionId: IdType;}>(
  'websocket/connect',
  async (payload, thunkAPI) => {
    const { sessionId } = payload;

    const ws = await apiClient.ws({url: 'ws', params: {sessionId}});
    setWebSocket(ws);
  }
);

export const webSocketSlice = createSlice({
  name: 'websocket',
  initialState,
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(connectWebSocket.pending, (state) => {
        state.status = 'connecting';
      })
      .addCase(connectWebSocket.rejected, (state) => {
        state.status = 'disconnected';
      })
      .addCase(connectWebSocket.fulfilled, (state, action) => {
        state.status = 'connected';
      });
  },
});

export default webSocketSlice.reducer;
