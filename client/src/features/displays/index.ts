import { createSlice, createEntityAdapter, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

import { Display } from '../../types/pipeline';

export const displaysAdapter = createEntityAdapter<Display>();

export interface DisplaysState extends ReturnType<typeof displaysAdapter['getInitialState']> {}

const initialState: DisplaysState = displaysAdapter.getInitialState();

export const displaysSlice = createSlice({
  name: 'displays',
  initialState,
  reducers: {
    setDisplay(state, action: PayloadAction<Display>) {
      const display = action.payload;
      displaysAdapter.setOne(state, display);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});

export const displaysSelector = displaysAdapter.getSelectors<RootState>(state => state.displays);

export const { setDisplay } = displaysSlice.actions;

export default displaysSlice.reducer;
