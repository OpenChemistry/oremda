import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { apiClient } from '../../client';
import { IdType } from '../../types';

export interface NotificationsState {
  status: 'connected' | 'disconnected' | 'connecting';
  ws: WebSocket | undefined; // Only serializable objects should be in the store...
}

const initialState: NotificationsState = {
  ws: undefined,
  status: 'disconnected',
}

export const connectNotifications = createAsyncThunk<WebSocket, {sessionId: IdType;}>(
  'notifications/connect',
  async (payload, thunkAPI) => {
    const { sessionId } = payload;

    const ws = await apiClient.ws({url: 'ws', params: {sessionId}});

    return ws;
  }
);

export const notificationsSlice = createSlice({
  name: 'notifications',
  initialState,
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(connectNotifications.pending, (state) => {
        state.status = 'connecting';
        state.ws = undefined;
      })
      .addCase(connectNotifications.rejected, (state) => {
        state.status = 'disconnected';
        state.ws = undefined;
      })
      .addCase(connectNotifications.fulfilled, (state, action) => {
        state.status = 'connected';
        state.ws = action.payload;
      });
  },
});

export default notificationsSlice.reducer;
